//--------------------------------------------------------------
//
// Fernando Gonzalez
//
// Course: CMPS-2433-101, Fall 24, Stringfellow
//
// Purpose: General description of what the program is to find //the highest bit that is set in a number, k. Then print out 
//the index of the highest binary digit set in the binary //representation of the number k. Then SET the next 
//highestbit to 1 and then print the new number, k2.Using //bitwise operators.
//
//--------------------------------------------------------------


#include <iostream>
#include <fstream>
#include <iomanip>

using namespace std;

// Function declarations
int findHighestBit(int k);
int setNextBit(int k, int highestBit);

// Function to find the highest bit set
int findHighestBit(int k) {
    if (k == 0) {
        return -1; // Special case for 0
    }

    int index = 0;
    while (k > 1) {  // Loop until k is reduced to 1
        k >>= 1;  // Shift right to remove the least significant bit
        index++;  // Count the shifts
    }

    return index;  // Return the index of the highest bit
}

// Function to set the next highest bit
int setNextBit(int k, int highestBit) {
    if (highestBit == -1) {
        return 1;  // Special case for 0: set the first bit
    }

    int mask = 1 << (highestBit + 1); // Shift 1 left by the next position
    return k | mask;  // Set the next highest bit
}

int main() {
    ifstream infile("HighBits.dat");

    // Ensure the file opened successfull
    int N;
    infile >> N;  // Read the number of test cases

    cout << "Fernando Gonzalez" << endl;
    cout << "Highest Bit Program 1" << endl;
    cout << "There are " << N << " test cases." << endl;
    cout << left << setw(8) << "k" << setw(15) << "HighestBit" << "k2" << endl;
    cout << "--------------------------" << endl;

    for (int i = 0; i < N; i++) {
        int k;
        infile >> k;  // Read each test case

        // Get the highest bit set
        int highestBit = findHighestBit(k);

        // Get k2, the number with the next highest bit set
        int k2 = setNextBit(k, highestBit);

        // Output the results
        if (k == 0) {
            cout << left << setw(8) << k << setw(15) << "-" << k2 << endl;
        } else {
            cout << left << setw(8) << k << setw(15) << highestBit + 1 << k2 << endl;
        }
    }

    infile.close();
    return 0;
}
